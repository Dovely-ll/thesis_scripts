Processing file: ../rocketmq/common/src/main/java/org/apache/rocketmq/common/TopicConfig.java
Methods in TopicConfig.java:
1  public TopicConfig() {
1  public TopicConfig(String topicName) {
1  public TopicConfig(String topicName, int readQueueNums, int writeQueueNums) {
1  public TopicConfig(String topicName, int readQueueNums, int writeQueueNums, int perm) {
1  public TopicConfig(String topicName, int readQueueNums, int writeQueueNums, int perm, int topicSysFlag) {
1  public TopicConfig(TopicConfig other) {
`  public String encode() {
`  public boolean decode(final String in) {
2  public String getTopicName() {
3  public void setTopicName(String topicName) {
2  public int getReadQueueNums() {
3  public void setReadQueueNums(int readQueueNums) {
2  public int getWriteQueueNums() {
3  public void setWriteQueueNums(int writeQueueNums) {
2  public int getPerm() {
3  public void setPerm(int perm) {
2  public TopicFilterType getTopicFilterType() {
3  public void setTopicFilterType(TopicFilterType topicFilterType) {
2  public int getTopicSysFlag() {
3  public void setTopicSysFlag(int topicSysFlag) {
2  public boolean isOrder() {
3  public void setOrder(boolean isOrder) {
2  public Map<String, String> getAttributes() {
3  public void setAttributes(Map<String, String> attributes) {
2  public TopicMessageType getTopicMessageType() {
3  public void setTopicMessageType(TopicMessageType topicMessageType) {
  public boolean equals(Object o) {
  public int hashCode() {
  public String toString() {
Constructors in TopicConfig.java:
  public TopicConfig() {
  public TopicConfig(String topicName) {
  public TopicConfig(String topicName, int readQueueNums, int writeQueueNums) {
  public TopicConfig(String topicName, int readQueueNums, int writeQueueNums, int perm) {
  public TopicConfig(String topicName, int readQueueNums, int writeQueueNums, int perm, int topicSysFlag) {
  public TopicConfig(TopicConfig other) {

Processing file: ../rocketmq/common/src/main/java/org/apache/rocketmq/common/AclConfig.java
Methods in AclConfig.java:
2  public List<String> getGlobalWhiteAddrs() {
3  public void setGlobalWhiteAddrs(List<String> globalWhiteAddrs) {
2  public List<PlainAccessConfig> getPlainAccessConfigs() {
3  public void setPlainAccessConfigs(List<PlainAccessConfig> plainAccessConfigs) {
  public String toString() {
No constructors found in AclConfig.java.

`Processing file: ../rocketmq/common/src/main/java/org/apache/rocketmq/common/BrokerConfigSingleton.java
Methods in BrokerConfigSingleton.java:
2  public static BrokerConfig getBrokerConfig() {
3  public static void setBrokerConfig(BrokerConfig brokerConfig) {
No constructors found in BrokerConfigSingleton.java.

`Processing file: ../rocketmq/common/src/main/java/org/apache/rocketmq/common/ConfigManager.java
Methods in ConfigManager.java:
  public boolean load() {
  private boolean loadBak() {
  public synchronized <T> void persist(String topicName, T t) {
  public synchronized <T> void persist(Map<String, T> m) {
  public synchronized void persist() {
  protected void decode0(final byte[] key, final byte[] body) {
  public boolean stop() {
No constructors found in ConfigManager.java.

Processing file: ../rocketmq/common/src/main/java/org/apache/rocketmq/common/ControllerConfig.java
Methods in ControllerConfig.java:
2  public String getRocketmqHome() {
3  public void setRocketmqHome(String rocketmqHome) {
2  public String getConfigStorePath() {
3  public void setConfigStorePath(String configStorePath) {
2  public long getScanNotActiveBrokerInterval() {
3  public void setScanNotActiveBrokerInterval(long scanNotActiveBrokerInterval) {
2  public int getControllerThreadPoolNums() {
3  public void setControllerThreadPoolNums(int controllerThreadPoolNums) {
2  public int getControllerRequestThreadPoolQueueCapacity() {
3  public void setControllerRequestThreadPoolQueueCapacity(int controllerRequestThreadPoolQueueCapacity) {
2  public String getControllerDLegerGroup() {
3  public void setControllerDLegerGroup(String controllerDLegerGroup) {
2  public String getControllerDLegerPeers() {
3  public void setControllerDLegerPeers(String controllerDLegerPeers) {
2  public String getControllerDLegerSelfId() {
3  public void setControllerDLegerSelfId(String controllerDLegerSelfId) {
2  public int getMappedFileSize() {
3  public void setMappedFileSize(int mappedFileSize) {
2  public String getControllerStorePath() {
3  public void setControllerStorePath(String controllerStorePath) {
2  public boolean isEnableElectUncleanMaster() {
3  public void setEnableElectUncleanMaster(boolean enableElectUncleanMaster) {
2  public boolean isProcessReadEvent() {
3  public void setProcessReadEvent(boolean processReadEvent) {
2  public boolean isNotifyBrokerRoleChanged() {
3  public void setNotifyBrokerRoleChanged(boolean notifyBrokerRoleChanged) {
2  public long getScanInactiveMasterInterval() {
3  public void setScanInactiveMasterInterval(long scanInactiveMasterInterval) {
`2  public String getDLedgerAddress() {
2  public MetricsExporterType getMetricsExporterType() {
3  public void setMetricsExporterType(MetricsExporterType metricsExporterType) {
2  public String getMetricsGrpcExporterTarget() {
3  public void setMetricsGrpcExporterTarget(String metricsGrpcExporterTarget) {
2  public String getMetricsGrpcExporterHeader() {
3  public void setMetricsGrpcExporterHeader(String metricsGrpcExporterHeader) {
2  public long getMetricGrpcExporterTimeOutInMills() {
3  public void setMetricGrpcExporterTimeOutInMills(long metricGrpcExporterTimeOutInMills) {
2  public long getMetricGrpcExporterIntervalInMills() {
3  public void setMetricGrpcExporterIntervalInMills(long metricGrpcExporterIntervalInMills) {
2  public long getMetricLoggingExporterIntervalInMills() {
3  public void setMetricLoggingExporterIntervalInMills(long metricLoggingExporterIntervalInMills) {
2  public int getMetricsPromExporterPort() {
3  public void setMetricsPromExporterPort(int metricsPromExporterPort) {
2  public String getMetricsPromExporterHost() {
3  public void setMetricsPromExporterHost(String metricsPromExporterHost) {
2  public String getMetricsLabel() {
3  public void setMetricsLabel(String metricsLabel) {
2  public boolean isMetricsInDelta() {
3  public void setMetricsInDelta(boolean metricsInDelta) {
No constructors found in ControllerConfig.java.

Processing file: ../rocketmq/common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Methods in BrokerConfig.java:
2  public long getMaxPopPollingSize() {
3  public void setMaxPopPollingSize(long maxPopPollingSize) {
2  public int getReviveQueueNum() {
3  public void setReviveQueueNum(int reviveQueueNum) {
2  public long getReviveInterval() {
3  public void setReviveInterval(long reviveInterval) {
2  public int getPopCkStayBufferTime() {
3  public void setPopCkStayBufferTime(int popCkStayBufferTime) {
2  public int getPopCkStayBufferTimeOut() {
3  public void setPopCkStayBufferTimeOut(int popCkStayBufferTimeOut) {
2  public int getPopPollingMapSize() {
3  public void setPopPollingMapSize(int popPollingMapSize) {
2  public long getReviveScanTime() {
3  public void setReviveScanTime(long reviveScanTime) {
2  public long getReviveMaxSlow() {
3  public void setReviveMaxSlow(long reviveMaxSlow) {
2  public int getPopPollingSize() {
3  public void setPopPollingSize(int popPollingSize) {
2  public boolean isEnablePopBufferMerge() {
3  public void setEnablePopBufferMerge(boolean enablePopBufferMerge) {
2  public int getPopCkMaxBufferSize() {
3  public void setPopCkMaxBufferSize(int popCkMaxBufferSize) {
2  public int getPopCkOffsetMaxQueueSize() {
3  public void setPopCkOffsetMaxQueueSize(int popCkOffsetMaxQueueSize) {
2  public boolean isEnablePopBatchAck() {
3  public void setEnablePopBatchAck(boolean enablePopBatchAck) {
2  public boolean isEnableSkipLongAwaitingAck() {
3  public void setEnableSkipLongAwaitingAck(boolean enableSkipLongAwaitingAck) {
2  public long getReviveAckWaitMs() {
3  public void setReviveAckWaitMs(long reviveAckWaitMs) {
2  public boolean isEnablePopLog() {
3  public void setEnablePopLog(boolean enablePopLog) {
2  public boolean isTraceOn() {
3  public void setTraceOn(final boolean traceOn) {
2  public long getStartAcceptSendRequestTimeStamp() {
3  public void setStartAcceptSendRequestTimeStamp(final long startAcceptSendRequestTimeStamp) {
2  public long getWaitTimeMillsInSendQueue() {
3  public void setWaitTimeMillsInSendQueue(final long waitTimeMillsInSendQueue) {
2  public long getConsumerFallbehindThreshold() {
3  public void setConsumerFallbehindThreshold(final long consumerFallbehindThreshold) {
2  public boolean isBrokerFastFailureEnable() {
3  public void setBrokerFastFailureEnable(final boolean brokerFastFailureEnable) {
2  public long getWaitTimeMillsInPullQueue() {
3  public void setWaitTimeMillsInPullQueue(final long waitTimeMillsInPullQueue) {
2  public boolean isDisableConsumeIfConsumerReadSlowly() {
3  public void setDisableConsumeIfConsumerReadSlowly(final boolean disableConsumeIfConsumerReadSlowly) {
2  public boolean isSlaveReadEnable() {
3  public void setSlaveReadEnable(final boolean slaveReadEnable) {
2  public int getRegisterBrokerTimeoutMills() {
3  public void setRegisterBrokerTimeoutMills(final int registerBrokerTimeoutMills) {
2  public String getRegionId() {
3  public void setRegionId(final String regionId) {
2  public boolean isTransferMsgByHeap() {
3  public void setTransferMsgByHeap(final boolean transferMsgByHeap) {
2  public String getMessageStorePlugIn() {
3  public void setMessageStorePlugIn(String messageStorePlugIn) {
2  public boolean isHighSpeedMode() {
3  public void setHighSpeedMode(final boolean highSpeedMode) {
2  public int getBrokerPermission() {
3  public void setBrokerPermission(int brokerPermission) {
2  public int getDefaultTopicQueueNums() {
3  public void setDefaultTopicQueueNums(int defaultTopicQueueNums) {
2  public boolean isAutoCreateTopicEnable() {
3  public void setAutoCreateTopicEnable(boolean autoCreateTopic) {
2  public String getBrokerIP1() {
3  public void setBrokerIP1(String brokerIP1) {
2  public String getBrokerIP2() {
3  public void setBrokerIP2(String brokerIP2) {
2  public int getSendMessageThreadPoolNums() {
3  public void setSendMessageThreadPoolNums(int sendMessageThreadPoolNums) {
2  public int getPutMessageFutureThreadPoolNums() {
3  public void setPutMessageFutureThreadPoolNums(int putMessageFutureThreadPoolNums) {
2  public int getPullMessageThreadPoolNums() {
3  public void setPullMessageThreadPoolNums(int pullMessageThreadPoolNums) {
2  public int getAckMessageThreadPoolNums() {
3  public void setAckMessageThreadPoolNums(int ackMessageThreadPoolNums) {
2  public int getProcessReplyMessageThreadPoolNums() {
3  public void setProcessReplyMessageThreadPoolNums(int processReplyMessageThreadPoolNums) {
2  public int getQueryMessageThreadPoolNums() {
3  public void setQueryMessageThreadPoolNums(final int queryMessageThreadPoolNums) {
2  public int getAdminBrokerThreadPoolNums() {
3  public void setAdminBrokerThreadPoolNums(int adminBrokerThreadPoolNums) {
2  public int getFlushConsumerOffsetInterval() {
3  public void setFlushConsumerOffsetInterval(int flushConsumerOffsetInterval) {
2  public int getFlushConsumerOffsetHistoryInterval() {
3  public void setFlushConsumerOffsetHistoryInterval(int flushConsumerOffsetHistoryInterval) {
2  public boolean isClusterTopicEnable() {
3  public void setClusterTopicEnable(boolean clusterTopicEnable) {
2  public String getNamesrvAddr() {
3  public void setNamesrvAddr(String namesrvAddr) {
2  public boolean isAutoCreateSubscriptionGroup() {
3  public void setAutoCreateSubscriptionGroup(boolean autoCreateSubscriptionGroup) {
2  public String getBrokerConfigPath() {
3  public void setBrokerConfigPath(String brokerConfigPath) {
2  public String getRocketmqHome() {
3  public void setRocketmqHome(String rocketmqHome) {
2  public int getListenPort() {
3  public void setListenPort(int listenPort) {
2  public int getLitePullMessageThreadPoolNums() {
3  public void setLitePullMessageThreadPoolNums(int litePullMessageThreadPoolNums) {
2  public int getLitePullThreadPoolQueueCapacity() {
3  public void setLitePullThreadPoolQueueCapacity(int litePullThreadPoolQueueCapacity) {
2  public int getAdminBrokerThreadPoolQueueCapacity() {
3  public void setAdminBrokerThreadPoolQueueCapacity(int adminBrokerThreadPoolQueueCapacity) {
2  public int getLoadBalanceThreadPoolQueueCapacity() {
3  public void setLoadBalanceThreadPoolQueueCapacity(int loadBalanceThreadPoolQueueCapacity) {
2  public int getSendHeartbeatTimeoutMillis() {
3  public void setSendHeartbeatTimeoutMillis(int sendHeartbeatTimeoutMillis) {
2  public long getWaitTimeMillsInLitePullQueue() {
3  public void setWaitTimeMillsInLitePullQueue(long waitTimeMillsInLitePullQueue) {
2  public boolean isLitePullMessageEnable() {
3  public void setLitePullMessageEnable(boolean litePullMessageEnable) {
2  public int getSyncBrokerMemberGroupPeriod() {
3  public void setSyncBrokerMemberGroupPeriod(int syncBrokerMemberGroupPeriod) {
2  public boolean isRejectTransactionMessage() {
3  public void setRejectTransactionMessage(boolean rejectTransactionMessage) {
2  public boolean isFetchNamesrvAddrByAddressServer() {
3  public void setFetchNamesrvAddrByAddressServer(boolean fetchNamesrvAddrByAddressServer) {
2  public int getSendThreadPoolQueueCapacity() {
3  public void setSendThreadPoolQueueCapacity(int sendThreadPoolQueueCapacity) {
2  public int getPutThreadPoolQueueCapacity() {
3  public void setPutThreadPoolQueueCapacity(int putThreadPoolQueueCapacity) {
2  public int getPullThreadPoolQueueCapacity() {
3  public void setPullThreadPoolQueueCapacity(int pullThreadPoolQueueCapacity) {
2  public int getAckThreadPoolQueueCapacity() {
3  public void setAckThreadPoolQueueCapacity(int ackThreadPoolQueueCapacity) {
2  public int getReplyThreadPoolQueueCapacity() {
3  public void setReplyThreadPoolQueueCapacity(int replyThreadPoolQueueCapacity) {
2  public int getQueryThreadPoolQueueCapacity() {
3  public void setQueryThreadPoolQueueCapacity(final int queryThreadPoolQueueCapacity) {
2  public boolean isBrokerTopicEnable() {
3  public void setBrokerTopicEnable(boolean brokerTopicEnable) {
2  public boolean isLongPollingEnable() {
3  public void setLongPollingEnable(boolean longPollingEnable) {
2  public boolean isNotifyConsumerIdsChangedEnable() {
3  public void setNotifyConsumerIdsChangedEnable(boolean notifyConsumerIdsChangedEnable) {
2  public long getShortPollingTimeMills() {
3  public void setShortPollingTimeMills(long shortPollingTimeMills) {
2  public int getClientManageThreadPoolNums() {
3  public void setClientManageThreadPoolNums(int clientManageThreadPoolNums) {
2  public int getClientManagerThreadPoolQueueCapacity() {
3  public void setClientManagerThreadPoolQueueCapacity(int clientManagerThreadPoolQueueCapacity) {
2  public int getConsumerManagerThreadPoolQueueCapacity() {
3  public void setConsumerManagerThreadPoolQueueCapacity(int consumerManagerThreadPoolQueueCapacity) {
2  public int getConsumerManageThreadPoolNums() {
3  public void setConsumerManageThreadPoolNums(int consumerManageThreadPoolNums) {
2  public int getCommercialBaseCount() {
3  public void setCommercialBaseCount(int commercialBaseCount) {
2  public boolean isEnableCalcFilterBitMap() {
3  public void setEnableCalcFilterBitMap(boolean enableCalcFilterBitMap) {
2  public int getExpectConsumerNumUseFilter() {
3  public void setExpectConsumerNumUseFilter(int expectConsumerNumUseFilter) {
2  public int getMaxErrorRateOfBloomFilter() {
3  public void setMaxErrorRateOfBloomFilter(int maxErrorRateOfBloomFilter) {
2  public long getFilterDataCleanTimeSpan() {
3  public void setFilterDataCleanTimeSpan(long filterDataCleanTimeSpan) {
2  public boolean isFilterSupportRetry() {
3  public void setFilterSupportRetry(boolean filterSupportRetry) {
2  public boolean isEnablePropertyFilter() {
3  public void setEnablePropertyFilter(boolean enablePropertyFilter) {
2  public boolean isCompressedRegister() {
3  public void setCompressedRegister(boolean compressedRegister) {
2  public boolean isForceRegister() {
3  public void setForceRegister(boolean forceRegister) {
2  public int getHeartbeatThreadPoolQueueCapacity() {
3  public void setHeartbeatThreadPoolQueueCapacity(int heartbeatThreadPoolQueueCapacity) {
2  public int getHeartbeatThreadPoolNums() {
3  public void setHeartbeatThreadPoolNums(int heartbeatThreadPoolNums) {
2  public long getWaitTimeMillsInHeartbeatQueue() {
3  public void setWaitTimeMillsInHeartbeatQueue(long waitTimeMillsInHeartbeatQueue) {
2  public int getRegisterNameServerPeriod() {
3  public void setRegisterNameServerPeriod(int registerNameServerPeriod) {
2  public long getTransactionTimeOut() {
3  public void setTransactionTimeOut(long transactionTimeOut) {
2  public int getTransactionCheckMax() {
3  public void setTransactionCheckMax(int transactionCheckMax) {
2  public long getTransactionCheckInterval() {
3  public void setTransactionCheckInterval(long transactionCheckInterval) {
2  public int getEndTransactionThreadPoolNums() {
3  public void setEndTransactionThreadPoolNums(int endTransactionThreadPoolNums) {
2  public int getEndTransactionPoolQueueCapacity() {
3  public void setEndTransactionPoolQueueCapacity(int endTransactionPoolQueueCapacity) {
2  public long getWaitTimeMillsInTransactionQueue() {
3  public void setWaitTimeMillsInTransactionQueue(long waitTimeMillsInTransactionQueue) {
2  public String getMsgTraceTopicName() {
3  public void setMsgTraceTopicName(String msgTraceTopicName) {
2  public boolean isTraceTopicEnable() {
3  public void setTraceTopicEnable(boolean traceTopicEnable) {
2  public boolean isAclEnable() {
3  public void setAclEnable(boolean aclEnable) {
2  public boolean isStoreReplyMessageEnable() {
3  public void setStoreReplyMessageEnable(boolean storeReplyMessageEnable) {
2  public boolean isEnableDetailStat() {
3  public void setEnableDetailStat(boolean enableDetailStat) {
2  public boolean isAutoDeleteUnusedStats() {
3  public void setAutoDeleteUnusedStats(boolean autoDeleteUnusedStats) {
2  public long getLoadBalancePollNameServerInterval() {
3  public void setLoadBalancePollNameServerInterval(long loadBalancePollNameServerInterval) {
2  public int getCleanOfflineBrokerInterval() {
3  public void setCleanOfflineBrokerInterval(int cleanOfflineBrokerInterval) {
2  public int getLoadBalanceProcessorThreadPoolNums() {
3  public void setLoadBalanceProcessorThreadPoolNums(int loadBalanceProcessorThreadPoolNums) {
2  public boolean isServerLoadBalancerEnable() {
3  public void setServerLoadBalancerEnable(boolean serverLoadBalancerEnable) {
2  public MessageRequestMode getDefaultMessageRequestMode() {
3  public void setDefaultMessageRequestMode(String defaultMessageRequestMode) {
2  public int getDefaultPopShareQueueNum() {
3  public void setDefaultPopShareQueueNum(int defaultPopShareQueueNum) {
2  public long getForwardTimeout() {
3  public void setForwardTimeout(long timeout) {
2  public int getBrokerHeartbeatInterval() {
3  public void setBrokerHeartbeatInterval(int brokerHeartbeatInterval) {
2  public long getBrokerNotActiveTimeoutMillis() {
3  public void setBrokerNotActiveTimeoutMillis(long brokerNotActiveTimeoutMillis) {
2  public boolean isEnableNetWorkFlowControl() {
3  public void setEnableNetWorkFlowControl(boolean enableNetWorkFlowControl) {
2  public boolean isEnableNotifyAfterPopOrderLockRelease() {
3  public void setEnableNotifyAfterPopOrderLockRelease(boolean enableNotifyAfterPopOrderLockRelease) {
2  public boolean isInitPopOffsetByCheckMsgInMem() {
3  public void setInitPopOffsetByCheckMsgInMem(boolean initPopOffsetByCheckMsgInMem) {
2  public boolean isRealTimeNotifyConsumerChange() {
3  public void setRealTimeNotifyConsumerChange(boolean realTimeNotifyConsumerChange) {
2  public boolean isEnableSlaveActingMaster() {
3  public void setEnableSlaveActingMaster(boolean enableSlaveActingMaster) {
2  public boolean isEnableRemoteEscape() {
3  public void setEnableRemoteEscape(boolean enableRemoteEscape) {
2  public boolean isSkipPreOnline() {
3  public void setSkipPreOnline(boolean skipPreOnline) {
2  public boolean isAsyncSendEnable() {
3  public void setAsyncSendEnable(boolean asyncSendEnable) {
2  public long getConsumerOffsetUpdateVersionStep() {
3  public void setConsumerOffsetUpdateVersionStep(long consumerOffsetUpdateVersionStep) {
2  public long getDelayOffsetUpdateVersionStep() {
3  public void setDelayOffsetUpdateVersionStep(long delayOffsetUpdateVersionStep) {
2  public int getCommercialSizePerMsg() {
3  public void setCommercialSizePerMsg(int commercialSizePerMsg) {
2  public long getWaitTimeMillsInAckQueue() {
3  public void setWaitTimeMillsInAckQueue(long waitTimeMillsInAckQueue) {
2  public boolean isRejectPullConsumerEnable() {
3  public void setRejectPullConsumerEnable(boolean rejectPullConsumerEnable) {
2  public boolean isAccountStatsEnable() {
3  public void setAccountStatsEnable(boolean accountStatsEnable) {
2  public boolean isAccountStatsPrintZeroValues() {
3  public void setAccountStatsPrintZeroValues(boolean accountStatsPrintZeroValues) {
2  public boolean isLockInStrictMode() {
3  public void setLockInStrictMode(boolean lockInStrictMode) {
2  public boolean isIsolateLogEnable() {
3  public void setIsolateLogEnable(boolean isolateLogEnable) {
2  public boolean isCompatibleWithOldNameSrv() {
3  public void setCompatibleWithOldNameSrv(boolean compatibleWithOldNameSrv) {
2  public boolean isEnableControllerMode() {
3  public void setEnableControllerMode(boolean enableControllerMode) {
2  public String getControllerAddr() {
3  public void setControllerAddr(String controllerAddr) {
2  public boolean isFetchControllerAddrByDnsLookup() {
3  public void setFetchControllerAddrByDnsLookup(boolean fetchControllerAddrByDnsLookup) {
2  public long getSyncBrokerMetadataPeriod() {
3  public void setSyncBrokerMetadataPeriod(long syncBrokerMetadataPeriod) {
2  public long getCheckSyncStateSetPeriod() {
3  public void setCheckSyncStateSetPeriod(long checkSyncStateSetPeriod) {
2  public long getSyncControllerMetadataPeriod() {
3  public void setSyncControllerMetadataPeriod(long syncControllerMetadataPeriod) {
2  public int getBrokerElectionPriority() {
3  public void setBrokerElectionPriority(int brokerElectionPriority) {
2  public long getControllerHeartBeatTimeoutMills() {
3  public void setControllerHeartBeatTimeoutMills(long controllerHeartBeatTimeoutMills) {
2  public boolean isRecoverConcurrently() {
3  public void setRecoverConcurrently(boolean recoverConcurrently) {
2  public int getRecoverThreadPoolNums() {
3  public void setRecoverThreadPoolNums(int recoverThreadPoolNums) {
2  public boolean isFetchNameSrvAddrByDnsLookup() {
3  public void setFetchNameSrvAddrByDnsLookup(boolean fetchNameSrvAddrByDnsLookup) {
2  public boolean isUseServerSideResetOffset() {
3  public void setUseServerSideResetOffset(boolean useServerSideResetOffset) {
2  public boolean isEnableBroadcastOffsetStore() {
3  public void setEnableBroadcastOffsetStore(boolean enableBroadcastOffsetStore) {
2  public long getBroadcastOffsetExpireSecond() {
3  public void setBroadcastOffsetExpireSecond(long broadcastOffsetExpireSecond) {
2  public long getBroadcastOffsetExpireMaxSecond() {
3  public void setBroadcastOffsetExpireMaxSecond(long broadcastOffsetExpireMaxSecond) {
2  public MetricsExporterType getMetricsExporterType() {
3  public void setMetricsExporterType(MetricsExporterType metricsExporterType) {
3  public void setMetricsExporterType(int metricsExporterType) {
3  public void setMetricsExporterType(String metricsExporterType) {
2  public int getMetricsOtelCardinalityLimit() {
3  public void setMetricsOtelCardinalityLimit(int metricsOtelCardinalityLimit) {
2  public String getMetricsGrpcExporterTarget() {
3  public void setMetricsGrpcExporterTarget(String metricsGrpcExporterTarget) {
2  public String getMetricsGrpcExporterHeader() {
3  public void setMetricsGrpcExporterHeader(String metricsGrpcExporterHeader) {
2  public long getMetricGrpcExporterTimeOutInMills() {
3  public void setMetricGrpcExporterTimeOutInMills(long metricGrpcExporterTimeOutInMills) {
2  public long getMetricGrpcExporterIntervalInMills() {
3  public void setMetricGrpcExporterIntervalInMills(long metricGrpcExporterIntervalInMills) {
2  public long getMetricLoggingExporterIntervalInMills() {
3  public void setMetricLoggingExporterIntervalInMills(long metricLoggingExporterIntervalInMills) {
2  public String getMetricsLabel() {
3  public void setMetricsLabel(String metricsLabel) {
2  public boolean isMetricsInDelta() {
3  public void setMetricsInDelta(boolean metricsInDelta) {
2  public int getMetricsPromExporterPort() {
3  public void setMetricsPromExporterPort(int metricsPromExporterPort) {
2  public String getMetricsPromExporterHost() {
3  public void setMetricsPromExporterHost(String metricsPromExporterHost) {
2  public int getTransactionOpMsgMaxSize() {
3  public void setTransactionOpMsgMaxSize(int transactionOpMsgMaxSize) {
2  public int getTransactionOpBatchInterval() {
3  public void setTransactionOpBatchInterval(int transactionOpBatchInterval) {
2  public long getChannelExpiredTimeout() {
3  public void setChannelExpiredTimeout(long channelExpiredTimeout) {
2  public long getSubscriptionExpiredTimeout() {
3  public void setSubscriptionExpiredTimeout(long subscriptionExpiredTimeout) {
2  public boolean isValidateSystemTopicWhenUpdateTopic() {
3  public void setValidateSystemTopicWhenUpdateTopic(boolean validateSystemTopicWhenUpdateTopic) {
2  public boolean isEstimateAccumulation() {
3  public void setEstimateAccumulation(boolean estimateAccumulation) {
2  public boolean isColdCtrStrategyEnable() {
3  public void setColdCtrStrategyEnable(boolean coldCtrStrategyEnable) {
2  public boolean isUsePIDColdCtrStrategy() {
3  public void setUsePIDColdCtrStrategy(boolean usePIDColdCtrStrategy) {
2  public long getCgColdReadThreshold() {
3  public void setCgColdReadThreshold(long cgColdReadThreshold) {
2  public long getGlobalColdReadThreshold() {
3  public void setGlobalColdReadThreshold(long globalColdReadThreshold) {
2  public boolean isUseStaticSubscription() {
3  public void setUseStaticSubscription(boolean useStaticSubscription) {
2  public long getFetchNamesrvAddrInterval() {
3  public void setFetchNamesrvAddrInterval(final long fetchNamesrvAddrInterval) {
2  public boolean isPopResponseReturnActualRetryTopic() {
3  public void setPopResponseReturnActualRetryTopic(boolean popResponseReturnActualRetryTopic) {
2  public boolean isEnableSingleTopicRegister() {
3  public void setEnableSingleTopicRegister(boolean enableSingleTopicRegister) {
2  public boolean isEnableMixedMessageType() {
3  public void setEnableMixedMessageType(boolean enableMixedMessageType) {
2  public boolean isEnableSplitRegistration() {
3  public void setEnableSplitRegistration(boolean enableSplitRegistration) {
2  public int getSplitRegistrationSize() {
3  public void setSplitRegistrationSize(int splitRegistrationSize) {
No constructors found in BrokerConfig.java.

Processing file: ../rocketmq/common/src/main/java/org/apache/rocketmq/common/PlainAccessConfig.java
Methods in PlainAccessConfig.java:
2  public String getAccessKey() {
3  public void setAccessKey(String accessKey) {
2  public String getSecretKey() {
3  public void setSecretKey(String secretKey) {
2  public String getWhiteRemoteAddress() {
3  public void setWhiteRemoteAddress(String whiteRemoteAddress) {
2  public boolean isAdmin() {
3  public void setAdmin(boolean admin) {
2  public String getDefaultTopicPerm() {
3  public void setDefaultTopicPerm(String defaultTopicPerm) {
2  public String getDefaultGroupPerm() {
3  public void setDefaultGroupPerm(String defaultGroupPerm) {
2  public List<String> getTopicPerms() {
3  public void setTopicPerms(List<String> topicPerms) {
2  public List<String> getGroupPerms() {
3  public void setGroupPerms(List<String> groupPerms) {
  public String toString() {
No constructors found in PlainAccessConfig.java.

`Processing file: ../rocketmq/common/src/main/java/org/apache/rocketmq/common/logging/JoranConfiguratorExt.java
Methods in JoranConfiguratorExt.java:
  private InputStream transformXml(InputStream in) throws IOException {
  public final void doConfigure0(URL url) throws JoranException {
No constructors found in JoranConfiguratorExt.java.

`Processing file: ../rocketmq/common/src/main/java/org/apache/rocketmq/common/logging/DefaultJoranConfiguratorExt.java
Methods in DefaultJoranConfiguratorExt.java:
  public DefaultJoranConfiguratorExt() {
  public ExecutionStatus configure(LoggerContext loggerContext) {
  public void configureByResource(URL url) throws JoranException {
  public URL findURLOfDefaultConfigurationFile(boolean updateStatus) {
  private URL findConfigFileURLFromSystemProperties(ClassLoader classLoader, boolean updateStatus) {
  private URL getResource(String filename, ClassLoader myClassLoader, boolean updateStatus) {
  private void statusOnResourceSearch(String resourceName, ClassLoader classLoader, URL url) {
  private void multiplicityWarning(String resourceName, ClassLoader classLoader) {
Constructors in DefaultJoranConfiguratorExt.java:
  public DefaultJoranConfiguratorExt() {

`Processing file: ../rocketmq/common/src/main/java/org/apache/rocketmq/common/config/RocksDBConfigManager.java
Methods in RocksDBConfigManager.java:
  public RocksDBConfigManager(long memTableFlushInterval) {
  public boolean load(String configFilePath, BiConsumer<byte[], byte[]> biConsumer) {
  public void start() {
  public boolean stop() {
  public void flushWAL() {
  public void put(final byte[] keyBytes, final int keyLen, final byte[] valueBytes) throws Exception {
  public void delete(final byte[] keyBytes) throws Exception {
  public void batchPutWithWal(final WriteBatch batch) throws Exception {
Constructors in RocksDBConfigManager.java:
  public RocksDBConfigManager(long memTableFlushInterval) {

`Processing file: ../rocketmq/common/src/main/java/org/apache/rocketmq/common/config/ConfigRocksDBStorage.java
Methods in ConfigRocksDBStorage.java:
  public ConfigRocksDBStorage(final String dbPath) {
  public ConfigRocksDBStorage(final String dbPath, boolean readOnly) {
  private void initOptions() {
  protected boolean postLoad() {
  protected void preShutdown() {
  private ColumnFamilyOptions createConfigOptions() {
  private DBOptions createConfigDBOptions() {
  private static String getDBLogDir() {
  public void put(final byte[] keyBytes, final int keyLen, final byte[] valueBytes) throws Exception {
  public void put(final ByteBuffer keyBB, final ByteBuffer valueBB) throws Exception {
  public byte[] get(final byte[] keyBytes) throws Exception {
  public void delete(final byte[] keyBytes) throws Exception {
  public void batchPut(final WriteBatch batch) throws RocksDBException {
  public void batchPutWithWal(final WriteBatch batch) throws RocksDBException {
  public RocksIterator iterator() {
  public void rangeDelete(final byte[] startKey, final byte[] endKey) throws RocksDBException {
  public RocksIterator iterator(ReadOptions readOptions) {
Constructors in ConfigRocksDBStorage.java:
  public ConfigRocksDBStorage(final String dbPath) {
  public ConfigRocksDBStorage(final String dbPath, boolean readOnly) {

Processing file: ../rocketmq/common/src/main/java/org/apache/rocketmq/common/namesrv/NamesrvConfig.java
Methods in NamesrvConfig.java:
2  public boolean isOrderMessageEnable() {
3  public void setOrderMessageEnable(boolean orderMessageEnable) {
2  public String getRocketmqHome() {
3  public void setRocketmqHome(String rocketmqHome) {
2  public String getKvConfigPath() {
3  public void setKvConfigPath(String kvConfigPath) {
2  public String getProductEnvName() {
3  public void setProductEnvName(String productEnvName) {
2  public boolean isClusterTest() {
3  public void setClusterTest(boolean clusterTest) {
2  public String getConfigStorePath() {
3  public void setConfigStorePath(final String configStorePath) {
2  public boolean isReturnOrderTopicConfigToBroker() {
3  public void setReturnOrderTopicConfigToBroker(boolean returnOrderTopicConfigToBroker) {
2  public int getClientRequestThreadPoolNums() {
3  public void setClientRequestThreadPoolNums(final int clientRequestThreadPoolNums) {
2  public int getDefaultThreadPoolNums() {
3  public void setDefaultThreadPoolNums(final int defaultThreadPoolNums) {
2  public int getClientRequestThreadPoolQueueCapacity() {
3  public void setClientRequestThreadPoolQueueCapacity(final int clientRequestThreadPoolQueueCapacity) {
2  public int getDefaultThreadPoolQueueCapacity() {
3  public void setDefaultThreadPoolQueueCapacity(final int defaultThreadPoolQueueCapacity) {
2  public long getScanNotActiveBrokerInterval() {
3  public void setScanNotActiveBrokerInterval(long scanNotActiveBrokerInterval) {
2  public int getUnRegisterBrokerQueueCapacity() {
3  public void setUnRegisterBrokerQueueCapacity(final int unRegisterBrokerQueueCapacity) {
2  public boolean isSupportActingMaster() {
3  public void setSupportActingMaster(final boolean supportActingMaster) {
2  public boolean isEnableAllTopicList() {
3  public void setEnableAllTopicList(boolean enableAllTopicList) {
2  public boolean isEnableTopicList() {
3  public void setEnableTopicList(boolean enableTopicList) {
2  public boolean isNotifyMinBrokerIdChanged() {
3  public void setNotifyMinBrokerIdChanged(boolean notifyMinBrokerIdChanged) {
2  public boolean isEnableControllerInNamesrv() {
3  public void setEnableControllerInNamesrv(boolean enableControllerInNamesrv) {
2  public boolean isNeedWaitForService() {
3  public void setNeedWaitForService(boolean needWaitForService) {
2  public int getWaitSecondsForService() {
3  public void setWaitSecondsForService(int waitSecondsForService) {
2  public boolean isDeleteTopicWithBrokerRegistration() {
3  public void setDeleteTopicWithBrokerRegistration(boolean deleteTopicWithBrokerRegistration) {
No constructors found in NamesrvConfig.java.

